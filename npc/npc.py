from random import choice, randint
from functools import wraps


def check_hp(func):
    @wraps(func)
    def wrapper(self, *args, **kwargs):
        if self.hp < 0:
            self.hp = 0
        return func(self, *args, **kwargs)

    return wrapper


def attack_phrase_decorator(func):
    @wraps(func)
    def wrapper(self, *args, **kwargs):
        phrases = [
            "–¢—ã –Ω–µ —É—Å—Ç–æ–∏—à—å –ø–µ—Ä–µ–¥ –º–æ–µ–π –º–æ—â—å—é!",
            "–ì–æ—Ç–æ–≤—å—Å—è –∫ –ø–æ—Ä–∞–∂–µ–Ω–∏—é!",
            "–¢–µ–±–µ –Ω–µ –ø–æ–±–µ–¥–∏—Ç—å –º–µ–Ω—è!",
            "–°–µ–π—á–∞—Å –±—É–¥–µ—Ç –±–æ–ª—å–Ω–æ!",
            "–Ø –Ω–µ –ø–æ–∑–≤–æ–ª—é —Ç–µ–±–µ –ø–æ–±–µ–¥–∏—Ç—å!"
        ]
        print(f"üõ°Ô∏è {self.name} –≥–æ–≤–æ—Ä–∏—Ç: {choice(phrases)}")
        return func(self, *args, **kwargs)
    return wrapper


class NPC:
    def __init__(self, name, hp):
        self.name = name
        self.hp = hp
        self.base_damage = 35

    def get_chance_crit_damage(self):
        return randint(5, self.base_damage)

    @attack_phrase_decorator
    def give_damage(self):
        return self.base_damage + self.get_chance_crit_damage()

    def take_damage(self, amount: int) -> None:
        self.hp = self.base_damage = self.base_damage - amount

    def get_hp(self) -> int:
        return self.hp

    def get_name(self) -> str:
        return self.name

    @check_hp
    def __str__(self):
        return f"{self.name} (‚ù§Ô∏è {self.hp})"
