from abc import ABC, abstractmethod
from character.create_character.director import CharacterDirector
import random
from npc.npc import NPC
from items.item import add_money_to_inventory


class GameState(ABC):
    @abstractmethod
    def handle(self, controller):
        pass


class MainMenuState(GameState):
    def handle(self, controller):
        print(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {controller.user if controller.user else '–ò–≥—Ä–æ–∫'}!")
        print("1) –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n2) –í—ã–π—Ç–∏")
        choice = input("> ")
        # Input/Output –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º –∞–±—Å—Ç—Ä–∞–∫—Ü–∏–∏. –ú–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç–æ–∏–ª–æ —Å–¥–µ–ª–∞—Ç—å Bridge —Ö–æ—Ç—å —Å–∞–º—ã–π —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π

        actions = {
            "1": lambda: controller.change_state(AuthState()),
            "2": controller.exit
        }

        action = actions.get(choice, lambda: print("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"))
        action()


class AuthState(GameState):
    def handle(self, controller):
        print(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ü–∏—è!")
        login = input("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        controller.change_state(CreateCharacter())


class CreateCharacter(GameState):
    def handle(self, controller):
        print("–ù–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!")
        name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫: ")
        director = CharacterDirector(name=name)

        print("1) –†–∞—Å–∞ –ß–µ–ª–æ–≤–µ–∫, –ö–ª–∞—Å—Å –ú–∞–≥")
        print("2) –†–∞—Å–∞ –ß–µ–ª–æ–≤–µ–∫, –ö–ª–∞—Å—Å –í–æ–∏–Ω")
        print("3) –†–∞—Å–∞ –ß–µ–ª–æ–≤–µ–∫, –ö–ª–∞—Å—Å –õ—É—á–Ω–∏–∫")
        print("4) –†–∞—Å–∞ –≠–ª—å—Ñ, –ö–ª–∞—Å—Å –ú–∞–≥")
        print("5) –†–∞—Å–∞ –≠–ª—å—Ñ, –ö–ª–∞—Å—Å –í–æ–∏–Ω")
        print("6) –†–∞—Å–∞ –≠–ª—å—Ñ, –ö–ª–∞—Å—Å –õ—É—á–Ω–∏–∫")

        choice = input("–°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä [1,2,3,4,5,6]: ")

        actions = {
            "1": director.create_human_mage(),
            "2": director.create_human_warrior(),
            "3": director.create_human_archer(),
            "4": director.create_elf_mage(),
            "5": director.create_elf_warrior(),
            "6": director.create_elf_archer(),
        }

        char = actions.get(choice)
        controller.char = char
        if char:
            print(f"\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É == {controller.char.name}  == \n")
            controller.change_state(GameplayState())
        else:
            print("–í—ã–±–æ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            self.handle(controller)


class GameplayState(GameState):
    def handle(self, controller):
        print("\nüè∞ –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥–æ—Ä–æ–¥–µ. –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?")
        print("1) –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏")
        print("2) –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –¢–µ–ª–µ–ø–æ—Ä—Ç–µ—Ä–æ–º")
        print("3) –û—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–±—è")
        print("4) –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")

        choice = input("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ [1,2,3,4]: ")

        actions = {
            "1": print("üåø –¢—ã –æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å—Å—è –≤–æ–∫—Ä—É–≥... –∏ –≤–∏–¥–µ—à—å –æ–¥–Ω–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è"),
            "2": lambda: controller.change_state(TeleporterState()),
            "3": print(controller.char.show_status()),
            "4": lambda: controller.exit
        }

        action = actions.get(choice, lambda: print("‚ùå –û—à–∏–±–∫–∞: –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!"))

        if choice == "1" or choice == "3":
            controller.change_state(GameplayState())
        else:
            action()


class TeleporterState(GameState):
    def handle(self, controller):
        print("\n‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫! –Ø –¢–µ–ª–µ–ø–æ—Ä—Ç–µ—Ä. ‚ú®")
        print("–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±—è –≤ –æ–¥–Ω—É –∏–∑ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –∑–æ–Ω:")

        locations = controller.location

        for num, location_info in locations.items():
            name = location_info['name']
            desc = location_info['description']
            difficulty = location_info['difficulty']
            print(f"\n{num}) {name} ‚Äì {desc} (–°–ª–æ–∂–Ω–æ—Å—Ç—å: {difficulty})")

        print("\n5) –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥.")

        choice = input("–ö—É–¥–∞ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è? [1,2,3,4,5]: ")

        if choice in locations:
            location_info = locations[choice]
            name = location_info['name']
            description = location_info['description']
            difficulty = location_info['difficulty']

            npc_info = location_info['npc']
            npc = NPC(npc_info['name'], npc_info['hp'])

            events = location_info.get('events', [])

            self.teleport(controller, name, description, difficulty, npc, events)
        elif choice == "5":
            controller.change_state(GameplayState())
        else:
            print("‚ùå –û—à–∏–±–∫–∞: –¢–∞–∫–æ–π –∑–æ–Ω—ã –Ω–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            self.handle(controller)

    def teleport(self, controller, location, description, difficulty, npc, events):
        print(f"üåü –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É—é –≤ {location}... –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üåü")
        controller.change_state(ExplorationState(location, npc, description, difficulty, events))


class BattleState(GameState):
    def __init__(self, monster_name, monster_hp):
        self.npc = NPC(monster_name, monster_hp)

    def handle(self, controller):
        print(f"\n‚öîÔ∏è –¢—ã –≤—Å—Ç—É–ø–∞–µ—à—å –≤ –±–æ–π —Å {self.npc.name}! ‚öîÔ∏è")
        print(f"–£ {self.npc.name} {self.npc.hp} HP!")

        while self.npc.hp > 0:
            print("\n1) –ê—Ç–∞–∫–æ–≤–∞—Ç—å üó°Ô∏è")
            print("2) –ë–µ–∂–∞—Ç—å üèÉ‚Äç‚ôÇÔ∏è")

            choice = input("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ [1,2]: ")

            if choice == "1":
                damage = int(controller.char.attack_damage)
                self.npc.hp -= damage
                print(f"–¢–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ {controller.char.current_hp} HP")
                print(f"\nüî•  –¢—ã –Ω–∞–Ω–µ—Å {damage} —É—Ä–æ–Ω–∞! –£ {self.npc.name} –æ—Å—Ç–∞–ª–æ—Å—å {self.npc.hp} HP!")
                mob_damage = self.npc.give_damage()
                controller.char.take_damage(mob_damage)

                print(f"\nüí• {self.npc.name} –Ω–∞–Ω–µ—Å —Ç–µ–±–µ {mob_damage}")
                if not controller.char.current_hp:
                    print(f"–¢—ã –ø–æ–≥–∏–±, —Ç–≤–æ–µ HP ==  {controller.char.current_hp}")
                    print(f"–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–æ—Ä–æ–¥ üèôÔ∏è")
                    controller.change_state(GameplayState())
                if self.npc.hp <= 0:
                    print(f"üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª {self.npc.name}! üèÜ")
                    # –ü–æ–±–µ–¥–∞ –Ω–∞–¥ –º–æ–Ω—Å—Ç—Ä–æ–º - –ø–æ–ª—É—á–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –Ω–∞–≥—Ä–∞–¥—É
                    self.reward_player(controller)
                    controller.change_state(GameplayState())
                    return
            elif choice == "2":
                print("üò® –¢—ã —Å–±–µ–∂–∞–ª —Å –ø–æ–ª—è –±–æ—è –∏ –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–æ—Ä–æ–¥.")
                controller.change_state(GameplayState())
                return
            else:
                print("‚ùå –û—à–∏–±–∫–∞: –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!")

    def reward_player(self, controller):
        money_reward = random.randint(500, 1500)
        exp_reward = random.randint(20, 100)
        controller.char.gain_exp(exp_reward)
        add_money_to_inventory(controller, money_reward)

        print(f"üéâ –¢—ã –ø–æ–ª—É—á–∏–ª {money_reward} üí∞ –º–æ–Ω–µ—Ç –∏ {exp_reward} ‚ú® –æ–ø—ã—Ç–∞!")


class ExplorationState(GameState):
    def __init__(self, location_name, npc, description, difficulty, events):
        self.location_name = location_name
        self.npc = npc
        self.description = description
        self.difficulty = difficulty
        self.events = events

    def handle(self, controller):
        print(f"\nüåç {self.location_name} ‚Äì –∏—Å—Å–ª–µ–¥—É–π –∏ —Å—Ä–∞–∂–∞–π—Å—è!")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {self.description}")
        print(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {self.difficulty}")

        print("\n1) –û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è")
        print(f"2) –°—Ä–∞–∑–∏—Ç—å—Å—è —Å {self.npc.name}")
        print("3) –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ [1,2,3]: ")

        actions = {
            "1": lambda: self.explore(controller),
            "2": lambda: controller.change_state(BattleState(self.npc.name, self.npc.hp)),
            "3": lambda: controller.change_state(GameplayState())
        }

        action = actions.get(choice, lambda: print("‚ùå –û—à–∏–±–∫–∞: –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!"))
        action()

    def explore(self, controller):
        print(f"\n{random.choice(self.events)}")
        controller.change_state(ExplorationState(self.location_name,
                                                 self.npc,
                                                 self.description,
                                                 self.difficulty,
                                                 self.events
                                                 )
                                )
