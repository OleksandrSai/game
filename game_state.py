from abc import ABC, abstractmethod
from character.create_character.director import CharacterDirector
import random


class GameState(ABC):
    @abstractmethod
    def handle(self, controller):
        pass


class MainMenuState(GameState):
    def handle(self, controller):
        print(f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {controller.user if controller.user else '–ò–≥—Ä–æ–∫'}!")
        print("1) –ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è\n2) –í—ã–π—Ç–∏")
        choice = input("> ")

        actions = {
            "1": lambda: controller.change_state(AuthState()),
            "2": controller.exit
        }

        action = actions.get(choice, lambda: print("–î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ"))
        action()


class AuthState(GameState):
    def handle(self, controller):
        print(f"–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ü–∏—è!")
        login = input("–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω:")
        password = input("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å:")
        controller.change_state(CreateCharacter())


class CreateCharacter(GameState):
    def handle(self, controller):
        print("–ù–∞ –≤–∞—à–µ–º –∞–∫–∫–∞—É–Ω—Ç–µ –Ω–µ—Ç –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π, —Å–æ–∑–¥–∞–π—Ç–µ –µ–≥–æ!")
        name = input("–í–≤–µ–¥–∏—Ç–µ –Ω–∏–∫: ")
        director = CharacterDirector(name=name)

        print("1) –†–∞—Å–∞ –ß–µ–ª–æ–≤–µ–∫, –ö–ª–∞—Å—Å –ú–∞–≥")
        print("2) –†–∞—Å–∞ –ß–µ–ª–æ–≤–µ–∫, –ö–ª–∞—Å—Å –í–æ–∏–Ω")
        print("3) –†–∞—Å–∞ –ß–µ–ª–æ–≤–µ–∫, –ö–ª–∞—Å—Å –õ—É—á–Ω–∏–∫")
        print("4) –†–∞—Å–∞ –≠–ª—å—Ñ, –ö–ª–∞—Å—Å –ú–∞–≥")
        print("5) –†–∞—Å–∞ –≠–ª—å—Ñ, –ö–ª–∞—Å—Å –í–æ–∏–Ω")
        print("6) –†–∞—Å–∞ –≠–ª—å—Ñ, –ö–ª–∞—Å—Å –õ—É—á–Ω–∏–∫")

        choice = input("–°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –≤—ã–±–æ—Ä [1,2,3,4,5,6]: ")

        actions = {
            "1": director.create_human_mage(),
            "2": director.create_human_warrior(),
            "3": director.create_human_archer(),
            "4": director.create_elf_mage(),
            "5": director.create_elf_warrior(),
            "6": director.create_elf_archer(),
        }

        char = actions.get(choice)
        controller.char = char
        if char:
            print(f"\n–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∏–≥—Ä—É == {controller.char.name}  == \n")
            controller.change_state(GameplayState())
        else:
            print("–í—ã–±–æ—Ä –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
            self.handle(controller)


class GameplayState(GameState):
    def handle(self, controller):
        print("\nüè∞ –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è –≤ –≥–æ—Ä–æ–¥–µ. –ß—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å?")
        print("1) –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –æ–∫—Ä–µ—Å—Ç–Ω–æ—Å—Ç–∏")
        print("2) –ü–æ–≥–æ–≤–æ—Ä–∏—Ç—å —Å –¢–µ–ª–µ–ø–æ—Ä—Ç–µ—Ä–æ–º")
        print("3) –û—Å–º–æ—Ç—Ä–µ—Ç—å —Å–µ–±—è")
        print("4) –í—ã–π—Ç–∏ –∏–∑ –∏–≥—Ä—ã")

        choice = input("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ [1,2,3]: ")

        actions = {
            "1": lambda: print("üåø –¢—ã –æ—Å–º–∞—Ç—Ä–∏–≤–∞–µ—à—å—Å—è –≤–æ–∫—Ä—É–≥... –∏ –≤–∏–¥–µ—à—å –æ–¥–Ω–∏ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤—ã –¥–ª—è —Ç–≤–æ–µ–≥–æ —Ä–∞–∑–≤–∏—Ç–∏—è"),
            "2": lambda: controller.change_state(TeleporterState()),  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¢–µ–ª–µ–ø–æ—Ä—Ç–µ—Ä—É
            "3": controller.char.show_status(),  # –ü–µ—Ä–µ—Ö–æ–¥ –∫ –¢–µ–ª–µ–ø–æ—Ä—Ç–µ—Ä—É
            "4": controller.exit
        }

        action = actions.get(choice, lambda: print("‚ùå –û—à–∏–±–∫–∞: –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!"))

        if choice == "1" or "3":
            print("\n–°–ø—Ä–∞—à–∏–≤–∞—é –µ—â–µ —Ä–∞–∑")
            self.handle(controller)
        else:
            action()


class TeleporterState(GameState):
    def handle(self, controller):
        print("\n‚ú® –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫! –Ø –¢–µ–ª–µ–ø–æ—Ä—Ç–µ—Ä. ‚ú®")
        print("–Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ–±—è –≤ –æ–¥–Ω—É –∏–∑ —á–µ—Ç—ã—Ä–µ—Ö —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ—á–Ω—ã—Ö –∑–æ–Ω:")
        print("1) –õ–µ—Å –î—Ä–µ–≤–Ω–∏—Ö ‚Äì –º–µ—Å—Ç–æ, –ø–æ–ª–Ω–æ–µ —Ç–∞–π–Ω –∏ –º–∞–≥–∏–∏.")
        print("2) –ì—Ä–æ–∑–æ–≤–æ–π –ö–∞–Ω—å–æ–Ω ‚Äì –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –¥–ª—è —Å–∞–º—ã—Ö –≤—ã–Ω–æ—Å–ª–∏–≤—ã—Ö.")
        print("3) –û–≥–Ω–µ–Ω–Ω—ã–µ –ü–µ—â–µ—Ä—ã ‚Äì –æ–ø–∞—Å–Ω–æ–µ –º–µ—Å—Ç–æ, –ø–æ–ª–Ω–æ–µ –ª–∞–≤—ã –∏ –º–æ–Ω—Å—Ç—Ä–æ–≤.")
        print("4) –õ–µ–¥—è–Ω—ã–µ –ü—É—Å—Ç–æ—à–∏ ‚Äì —Å—É—Ä–æ–≤—ã–π –∫—Ä–∞–π –≤–µ—á–Ω–æ–≥–æ —Ö–æ–ª–æ–¥–∞.")
        print("5) –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥.")

        choice = input("–ö—É–¥–∞ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å—Å—è? [1,2,3,4,5]: ")

        actions = {
            "1": lambda: self.teleport(controller, "–õ–µ—Å –î—Ä–µ–≤–Ω–∏—Ö", choice),
            "2": lambda: self.teleport(controller, "–ì—Ä–æ–∑–æ–≤–æ–π –ö–∞–Ω—å–æ–Ω", choice),
            "3": lambda: self.teleport(controller, "–û–≥–Ω–µ–Ω–Ω—ã–µ –ü–µ—â–µ—Ä—ã", choice),
            "4": lambda: self.teleport(controller, "–õ–µ–¥—è–Ω—ã–µ –ü—É—Å—Ç–æ—à–∏", choice),
            "5": lambda: controller.change_state(GameplayState())  # –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –∏–≥—Ä—É
        }

        action = actions.get(choice)
        if action:
            action()
        else:
            print("‚ùå –û—à–∏–±–∫–∞: –¢–∞–∫–æ–π –∑–æ–Ω—ã –Ω–µ—Ç! –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")
            self.handle(controller)

    def teleport(self, controller, location, choice):
        print(f"üåü –¢–µ–ª–µ–ø–æ—Ä—Ç–∏—Ä—É—é –≤ {location}... –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! üåü")
        actions = {
            "1": lambda: controller.change_state(AncientForestState()),
            "2": lambda: controller.change_state(ThunderCanyonState()),
            "3": lambda: controller.change_state(FireCavesState()),
            "4": lambda: controller.change_state(IceWastesState()),
            "5": lambda: controller.change_state(GameplayState())
        }

        actions.get(choice)()


class BattleState(GameState):
    def __init__(self, monster_name, monster_hp):
        self.monster_name = monster_name
        self.monster_hp = monster_hp

    def handle(self, controller):
        print(f"\n‚öîÔ∏è –¢—ã –≤—Å—Ç—É–ø–∞–µ—à—å –≤ –±–æ–π —Å {self.monster_name}! ‚öîÔ∏è")
        print(f"–£ {self.monster_name} {self.monster_hp} HP!")

        while self.monster_hp > 0:
            print("\n1) –ê—Ç–∞–∫–æ–≤–∞—Ç—å üó°Ô∏è")
            print("2) –ë–µ–∂–∞—Ç—å üèÉ‚Äç‚ôÇÔ∏è")

            choice = input("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ [1,2]: ")

            if choice == "1":
                damage = int(controller.char.attack_damage)
                self.monster_hp -= damage
                print(f"–¢–≤–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ {controller.char.current_hp}")
                print(f"üí• –¢—ã –Ω–∞–Ω–µ—Å {damage} —É—Ä–æ–Ω–∞! –£ {self.monster_name} –æ—Å—Ç–∞–ª–æ—Å—å {max(self.monster_hp, 0)} HP!")
                mob_damage = random.randint(1, 500)
                controller.char.take_damage(mob_damage)

                print(f"\nüí• {self.monster_name} –Ω–∞–Ω–µ—Å —Ç–µ–±–µ {mob_damage}")
                if not controller.char.current_hp:
                    print(f"–¢—ã –ø–æ–≥–∏–±, —Ç–≤–æ–µ HP ==  {controller.char.current_hp}")
                    print(f"–í–æ–∑–≤—Ä–∞—â–∞—é –≤ –≥–æ—Ä–æ–¥")
                    controller.change_state(GameplayState())
                if self.monster_hp <= 0:
                    print(f"üéâ –¢—ã –ø–æ–±–µ–¥–∏–ª {self.monster_name}! üèÜ")
                    controller.change_state(GameplayState())
                    return
            elif choice == "2":
                print("üò® –¢—ã —Å–±–µ–∂–∞–ª —Å –ø–æ–ª—è –±–æ—è –∏ –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–æ—Ä–æ–¥.")
                controller.change_state(GameplayState())
                return
            else:
                print("‚ùå –û—à–∏–±–∫–∞: –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!")


class AncientForestState(GameState):
    def handle(self, controller):
        print("\nüå≤ –¢—ã –ø–æ–ø–∞–ª –≤ –õ–µ—Å –î—Ä–µ–≤–Ω–∏—Ö ‚Äì –º–µ—Å—Ç–æ –º–∞–≥–∏–∏ –∏ —Ç–∞–π–Ω.")
        print("1) –ò—Å—Å–ª–µ–¥–æ–≤–∞—Ç—å –ª–µ—Å")
        print("2) –°—Ä–∞–∑–∏—Ç—å—Å—è —Å –î—Ä–µ–≤–Ω–∏–º –î—É—Ö–æ–º üëª")
        print("3) –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ [1,2,3]: ")

        actions = {
            "1": self.explore_forest,
            "2": lambda: controller.change_state(BattleState("–î—Ä–µ–≤–Ω–∏–π –î—É—Ö", 30)),
            "3": lambda: controller.change_state(GameplayState())
        }

        action = actions.get(choice, lambda: print("‚ùå –û—à–∏–±–∫–∞: –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!"))
        action()

    def explore_forest(self, controller):
        events = [
            "üåø –¢—ã –Ω–∞—à–µ–ª –¥—Ä–µ–≤–Ω–∏–π –∞–º—É–ª–µ—Ç, –æ–Ω –∏—Å–ø—É—Å–∫–∞–µ—Ç —Å–ª–∞–±—ã–π —Å–≤–µ—Ç!",
            "ü¶â –¢—ã —É—Å–ª—ã—à–∞–ª —à–µ–ø–æ—Ç –¥–µ—Ä–µ–≤—å–µ–≤, –Ω–æ –Ω–µ —Ä–∞–∑–æ–±—Ä–∞–ª —Å–ª–æ–≤...",
            "üê∫ –ò–∑ –∫—É—Å—Ç–æ–≤ –≤—ã–±–µ–∂–∞–ª –≤–æ–ª–∫! –ö —Å—á–∞—Å—Ç—å—é, –æ–Ω —Ç–µ–±—è –Ω–µ –∑–∞–º–µ—Ç–∏–ª.",
            "üîÆ –¢—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª –∞–ª—Ç–∞—Ä—å –º–∞–≥–∏–∏, —Ç–≤–æ–∏ —Å–∏–ª—ã –Ω–µ–º–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏–ª–∏—Å—å!"
        ]
        print(random.choice(events))


class ThunderCanyonState(GameState):
    def handle(self, controller):
        print("\n‚õà –¢—ã –æ–∫–∞–∑–∞–ª—Å—è –≤ –ì—Ä–æ–∑–æ–≤–æ–º –ö–∞–Ω—å–æ–Ω–µ ‚Äì –∏—Å–ø—ã—Ç–∞–Ω–∏–µ –¥–ª—è –≤—ã–Ω–æ—Å–ª–∏–≤—ã—Ö.")
        print("1) –û—Å–º–æ—Ç—Ä–µ—Ç—å—Å—è")
        print("2) –°—Ä–∞–∑–∏—Ç—å—Å—è —Å –ì—Ä–æ–º–æ–≤—ã–º –í–µ–ª–∏–∫–∞–Ω–æ–º ‚ö°")
        print("3) –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ [1,2,3]: ")

        actions = {
            "1": self.explore_canyon,
            "2": lambda: controller.change_state(BattleState("–ì—Ä–æ–º–æ–≤–æ–π –í–µ–ª–∏–∫–∞–Ω", 40)),
            "3": lambda: controller.change_state(GameplayState())
        }

        action = actions.get(choice, lambda: print("‚ùå –û—à–∏–±–∫–∞: –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!"))
        action()

    def explore_canyon(self, controller):
        events = [
            "‚ö° –ú–æ–ª–Ω–∏—è —É–¥–∞—Ä–∏–ª–∞ –≤ –∫–∞–º–µ–Ω—å —Ä—è–¥–æ–º —Å —Ç–æ–±–æ–π ‚Äì –±—É–¥—å –æ—Å—Ç–æ—Ä–æ–∂–µ–Ω!",
            "üè∫ –¢—ã –Ω–∞—à–µ–ª –¥—Ä–µ–≤–Ω–∏–π —Å–æ—Å—É–¥ —Å –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–π –∂–∏–¥–∫–æ—Å—Ç—å—é.",
            "üåÄ –í–µ—Ç–µ—Ä —É—Å–∏–ª–∏–≤–∞–µ—Ç—Å—è, —Ç–µ–±—è –Ω–∞—á–∏–Ω–∞–µ—Ç —Å–Ω–æ—Å–∏—Ç—å —Å —Ç—Ä–æ–ø—ã!",
            "üíé –ü–æ–¥ –∫–∞–º–Ω–µ–º —Ç—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª –º–∞–ª–µ–Ω—å–∫–∏–π –¥—Ä–∞–≥–æ—Ü–µ–Ω–Ω—ã–π –∫–∞–º–µ–Ω—å."
        ]
        print(random.choice(events))


class FireCavesState(GameState):
    def handle(self, controller):
        print("\nüî• –¢—ã –ø–æ–ø–∞–ª –≤ –û–≥–Ω–µ–Ω–Ω—ã–µ –ü–µ—â–µ—Ä—ã ‚Äì –∑–¥–µ—Å—å –∂–∞—Ä–∫–æ –∏ –æ–ø–∞—Å–Ω–æ!")
        print("1) –í–æ–π—Ç–∏ –≥–ª—É–±–∂–µ –≤ –ø–µ—â–µ—Ä—ã")
        print("2) –°—Ä–∞–∑–∏—Ç—å—Å—è —Å –û–≥–Ω–µ–Ω–Ω—ã–º –î–µ–º–æ–Ω–æ–º üî•")
        print("3) –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ [1,2,3]: ")

        actions = {
            "1": self.explore_cave,
            "2": lambda: controller.change_state(BattleState("–û–≥–Ω–µ–Ω–Ω—ã–π –î–µ–º–æ–Ω", 50)),
            "3": lambda: controller.change_state(GameplayState())
        }

        action = actions.get(choice, lambda: print("‚ùå –û—à–∏–±–∫–∞: –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!"))
        action()

    def explore_cave(self, controller):
        events = [
            "üî• –¢—ã –Ω–∞—à–µ–ª —Å—Ç–∞—Ä—ã–π –º–µ—á, –æ–ø–∞–ª–µ–Ω–Ω—ã–π –ø–ª–∞–º–µ–Ω–µ–º.",
            "üíÄ –í –ø–µ—â–µ—Ä–µ –ª–µ–∂–∞—Ç –∫–æ—Å—Ç–∏, —á–µ–π-—Ç–æ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ—Ö–æ–¥...",
            "üíé –¢—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª —Ä—É–±–∏–Ω, –º–µ—Ä—Ü–∞—é—â–∏–π –≤ —Ç–µ–º–Ω–æ—Ç–µ!",
            "üåã –ó–µ–º–ª—è –¥—Ä–æ–∂–∏—Ç ‚Äì –∫–∞–∂–µ—Ç—Å—è, —Å–∫–æ—Ä–æ –Ω–∞—á–Ω–µ—Ç—Å—è –∏–∑–≤–µ—Ä–∂–µ–Ω–∏–µ!"
        ]
        print(random.choice(events))


class IceWastesState(GameState):
    def handle(self, controller):
        print("\n‚ùÑÔ∏è –¢—ã –æ–∫–∞–∑–∞–ª—Å—è –≤ –õ–µ–¥—è–Ω—ã—Ö –ü—É—Å—Ç–æ—à–∞—Ö ‚Äì —Å—É—Ä–æ–≤–æ–º –∫—Ä–∞—é –≤–µ—á–Ω–æ–≥–æ —Ö–æ–ª–æ–¥–∞.")
        print("1) –†–∞–∑–≤–µ–¥–∞—Ç—å –º–µ—Å—Ç–Ω–æ—Å—Ç—å")
        print("2) –°—Ä–∞–∑–∏—Ç—å—Å—è —Å –õ–µ–¥—è–Ω—ã–º –ì–æ–ª–µ–º–æ–º ‚ùÑÔ∏è")
        print("3) –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–æ—Ä–æ–¥")

        choice = input("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ [1,2,3]: ")

        actions = {
            "1": self.explore_ice_wastes,
            "2": lambda: controller.change_state(BattleState("–õ–µ–¥—è–Ω–æ–π –ì–æ–ª–µ–º", 35)),
            "3": lambda: controller.change_state(GameplayState())
        }

        action = actions.get(choice, lambda: print("‚ùå –û—à–∏–±–∫–∞: –î–µ–π—Å—Ç–≤–∏–µ –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–æ!"))
        action()

    def explore_ice_wastes(self, controller):
        events = [
            "üßä –õ–µ–¥ —Ç—Ä–µ—Å–Ω—É–ª –ø–æ–¥ —Ç–≤–æ–∏–º–∏ –Ω–æ–≥–∞–º–∏, –Ω–æ —Ç—ã —É—Å–ø–µ–ª —É–≤–µ—Ä–Ω—É—Ç—å—Å—è!",
            "ü•∂ –í–¥–∞–ª–µ–∫–µ —Ç—ã –∑–∞–º–µ—Ç–∏–ª —Ç–∞–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–∏–ª—É—ç—Ç, –Ω–æ –æ–Ω –∏—Å—á–µ–∑...",
            "ü¶¥ –¢—ã –Ω–∞—à–µ–ª –æ—Å—Ç–∞–Ω–∫–∏ –¥—Ä–µ–≤–Ω–µ–≥–æ —Å—É—â–µ—Å—Ç–≤–∞.",
            "üåü –°—Ä–µ–¥–∏ —Å–Ω–µ–≥–æ–≤ —Ç—ã –æ–±–Ω–∞—Ä—É–∂–∏–ª —Å–≤–µ—Ä–∫–∞—é—â–∏–π –ª–µ–¥—è–Ω–æ–π –∫—Ä–∏—Å—Ç–∞–ª–ª."
        ]
        print(random.choice(events))
